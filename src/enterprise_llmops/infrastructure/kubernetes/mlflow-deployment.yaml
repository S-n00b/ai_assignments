# MLflow Tracking Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-tracking
  namespace: llmops-enterprise
  labels:
    app: mlflow-tracking
    component: mlops
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mlflow-tracking
  template:
    metadata:
      labels:
        app: mlflow-tracking
    spec:
      containers:
        - name: mlflow
          image: python:3.9-slim
          command: ["/bin/bash"]
          args:
            - -c
            - |
              pip install mlflow[extras]==2.8.1 psycopg2-binary boto3
              mlflow server \
                --backend-store-uri postgresql://mlflow:mlflow@postgres-service:5432/mlflow \
                --default-artifact-root s3://mlflow-artifacts/ \
                --host 0.0.0.0 \
                --port 5000 \
                --workers 4
          ports:
            - containerPort: 5000
              name: http
          env:
            - name: MLFLOW_S3_ENDPOINT_URL
              value: "http://minio-service:9000"
            - name: AWS_ACCESS_KEY_ID
              value: "minioadmin"
            - name: AWS_SECRET_ACCESS_KEY
              value: "minioadmin"
            - name: MLFLOW_TRACKING_URI
              value: "http://localhost:5000"
          resources:
            requests:
              memory: "1Gi"
              cpu: "0.5"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-tracking-service
  namespace: llmops-enterprise
  labels:
    app: mlflow-tracking
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
      name: http
  selector:
    app: mlflow-tracking
---
# MLflow UI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-ui
  namespace: llmops-enterprise
  labels:
    app: mlflow-ui
    component: mlops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow-ui
  template:
    metadata:
      labels:
        app: mlflow-ui
    spec:
      containers:
        - name: mlflow-ui
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: mlflow-ui-config
              mountPath: /etc/nginx/conf.d
          resources:
            requests:
              memory: "128Mi"
              cpu: "0.1"
            limits:
              memory: "256Mi"
              cpu: "0.2"
      volumes:
        - name: mlflow-ui-config
          configMap:
            name: mlflow-ui-config
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-ui-service
  namespace: llmops-enterprise
  labels:
    app: mlflow-ui
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      name: http
  selector:
    app: mlflow-ui
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-ui-config
  namespace: llmops-enterprise
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location / {
            proxy_pass http://mlflow-tracking-service:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
---
# PostgreSQL Database for MLflow
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-mlflow
  namespace: llmops-enterprise
  labels:
    app: postgres-mlflow
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-mlflow
  template:
    metadata:
      labels:
        app: postgres-mlflow
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              value: "mlflow"
            - name: POSTGRES_USER
              value: "mlflow"
            - name: POSTGRES_PASSWORD
              value: "mlflow"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          resources:
            requests:
              memory: "1Gi"
              cpu: "0.5"
            limits:
              memory: "2Gi"
              cpu: "1"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - mlflow
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - mlflow
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: llmops-enterprise
  labels:
    app: postgres-mlflow
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres-mlflow
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: llmops-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
# MinIO for MLflow Artifacts
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: llmops-enterprise
  labels:
    app: minio
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          command:
            - /bin/bash
            - -c
            - minio server /data --console-address ":9001"
          ports:
            - containerPort: 9000
              name: api
            - containerPort: 9001
              name: console
          env:
            - name: MINIO_ROOT_USER
              value: "minioadmin"
            - name: MINIO_ROOT_PASSWORD
              value: "minioadmin"
          resources:
            requests:
              memory: "1Gi"
              cpu: "0.5"
            limits:
              memory: "2Gi"
              cpu: "1"
          volumeMounts:
            - name: minio-data
              mountPath: /data
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: minio-data
          persistentVolumeClaim:
            claimName: minio-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: llmops-enterprise
  labels:
    app: minio
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      name: api
    - port: 9001
      targetPort: 9001
      name: console
  selector:
    app: minio
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-data-pvc
  namespace: llmops-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
