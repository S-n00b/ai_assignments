---
alwaysApply: true
description: AI Assignments project structure and organization
---

# AI Assignments Project Structure

## Directory Organization

### Core Directories
- **`src/`**: Main source code
  - `ai_architecture/`: AI system architecture components
  - `gradio_app/`: Gradio web application
  - `model_evaluation/`: Model evaluation and testing
  - `utils/`: Utility functions and helpers

- **`tests/`**: Test suites
  - `unit/`: Unit tests for individual components
  - `integration/`: Integration tests
  - `e2e/`: End-to-end tests
  - `fixtures/`: Test data and mock objects

- **`docs/`**: Documentation
  - Jekyll site configuration
  - Sphinx API documentation
  - Markdown guides and tutorials

- **`config/`**: Configuration files
  - `requirements.txt`: Main dependencies
  - `requirements-testing.txt`: Testing dependencies
  - `pytest.ini`: Pytest configuration

- **`scripts/`**: Automation scripts
  - `dev-commands.ps1`: PowerShell development commands
  - `setup-repository.ps1`: Repository setup automation

## Key Configuration Files
- **Jekyll**: [docs/_config.yml](mdc:docs/_config.yml)
- **Dependencies**: [config/requirements.txt](mdc:config/requirements.txt)
- **Testing**: [config/pytest.ini](mdc:config/pytest.ini)
- **Development**: [scripts/dev-commands.ps1](mdc:scripts/dev-commands.ps1)

## Development Workflow
1. Use PowerShell commands from [scripts/dev-commands.ps1](mdc:scripts/dev-commands.ps1)
2. Run tests before committing changes
3. Follow the project's modular architecture patterns
4. Update documentation when adding new features

## Virtual Environment
- Located at: `venv/`
- Activate with: `.\venv\Scripts\Activate.ps1`
- Always activate before running Python commands