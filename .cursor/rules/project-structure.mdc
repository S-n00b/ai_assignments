---
alwaysApply: true
description: Project structure and file organization guidelines
---

# Project Structure and Organization Rules

## Root Directory Structure

```
ai_assignments/
├── src/                    # Source code (Python modules)
├── tests/                  # Test suites (unit, integration, e2e)
├── docs/                   # Documentation (MkDocs)
├── config/                 # Configuration files
├── scripts/                # Automation and utility scripts
├── data/                   # Generated data and datasets
├── logs/                   # Application logs
├── site/                   # Built MkDocs site (auto-generated)
├── venv/                   # Python virtual environment
└── [root config files]     # Project-level configuration
```

## Source Code Organization

### Main Source Directories

- [src/enterprise_llmops/](mdc:src/enterprise_llmops/) - Enterprise LLMOps Platform (Assignment 2)
- [src/gradio_app/](mdc:src/gradio_app/) - Model Evaluation Interface (Assignment 1)
- [src/ai_architecture/](mdc:src/ai_architecture/) - AI system architecture components
- [src/model_evaluation/](mdc:src/model_evaluation/) - Model evaluation pipeline
- [src/utils/](mdc:src/utils/) - Utility functions and helpers

## Configuration Files

### Configuration Directory Structure

All configuration files in [config/](mdc:config/):

- [config/requirements.txt](mdc:config/requirements.txt) - Main Python dependencies
- [config/requirements-testing.txt](mdc:config/requirements-testing.txt) - Testing dependencies
- [config/pytest.ini](mdc:config/pytest.ini) - Pytest configuration
- [config/enterprise-config.yaml](mdc:config/enterprise-config.yaml) - Enterprise platform config
- [config/gradio_models.json](mdc:config/gradio_models.json) - Gradio app model configuration

### Root Configuration Files

- [README.md](mdc:README.md) - Project overview and quick start
- [TODO.md](mdc:TODO.md) - Task tracking and progress
- [SERVER_COMMANDS.md](mdc:SERVER_COMMANDS.md) - Server startup commands
- [QUICK_COMMANDS.txt](mdc:QUICK_COMMANDS.txt) - Quick reference commands

## Documentation Structure

### MkDocs Documentation Structure

All documentation in [docs/](mdc:docs/):

```
docs/
├── mkdocs.yml                    # MkDocs configuration
├── docs_content/                 # Documentation content
│   ├── category1/                # Model Enablement & UX Evaluation
│   ├── category2/                # AI System Architecture & MLOps
│   ├── api/                      # Unified API documentation
│   ├── assignments/              # Assignment-specific content
│   ├── executive/                # Executive presentations
│   ├── professional/             # Professional content
│   ├── development/              # Development guides
│   ├── resources/                # Resources and troubleshooting
│   └── live-applications/        # Live application demos
├── assets/                       # Images, CSS, JS files
└── site/                         # Generated site (auto-generated)
```

## File Naming Conventions

### Python Files

- Use snake_case: `model_evaluation.py`, `fastapi_app.py`
- Use descriptive names that indicate functionality

### Configuration Files

- Use kebab-case: `enterprise-config.yaml`, `gradio-models.json`
- Include file type in name: `.yaml`, `.json`, `.ini`

### Documentation Files

- Use kebab-case: `model-evaluation-framework.md`
- Use descriptive names that match content
- Use `index.md` for directory landing pages

### Script Files

- Use kebab-case for PowerShell: `dev-commands.ps1`
- Use snake_case for Python: `generate_evaluation_dataset.py`

## Virtual Environment Management

### Virtual Environment Location

- Virtual environment in [venv/](mdc:venv/) directory
- Activation script: [venv/Scripts/Activate.ps1](mdc:venv/Scripts/Activate.ps1)
- Always activate before running Python commands

### Dependency Management

- Main dependencies: [config/requirements.txt](mdc:config/requirements.txt)
- Testing dependencies: [config/requirements-testing.txt](mdc:config/requirements-testing.txt)
- Documentation dependencies: [docs/requirements-docs.txt](mdc:docs/requirements-docs.txt)

## Quality Assurance

### File Organization Validation

Before committing changes, verify:

- [ ] Files are in correct directories according to this structure
- [ ] No files are in root directory that should be in subdirectories
- [ ] Configuration files are in [config/](mdc:config/) directory
- [ ] Scripts are in [scripts/](mdc:scripts/) directory
- [ ] Documentation follows MkDocs structure

### Import Validation

- [ ] All imports use correct relative paths
- [ ] No circular import dependencies
- [ ] External dependencies are properly declared
